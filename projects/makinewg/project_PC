# William Makinen - project_PC

import robot_controller as robo
import tkinter
from tkinter import ttk
import ev3dev.ev3 as ev3
import mqtt_remote_method_calls as com


def main():

    mqtt_client = com.MqttClient()
    mqtt_client.connect_to_ev3()
    mqtt_client1 = com.MqttClient()
    mqtt_client1.connect_to_ev3()

    root = tkinter.Tk()
    root.title("MQTT Remote")

    main_frame = ttk.Frame(root, padding=20, relief='raised')

    left_speed_label = ttk.Label(main_frame, text="Fire Station 120")
    left_speed_label.grid(row=0, column=0)
    left_speed_entry = ttk.Entry(main_frame, width=8)
    left_speed_entry.insert(0, "600")
    left_speed_entry.grid(row=3, column=0)

    right_speed_label = ttk.Label(main_frame, text="Dispatch")
    right_speed_label.grid(row=0, column=1)
    right_speed_entry = ttk.Entry(main_frame, width=8, justify=tkinter.LEFT)
    right_speed_entry.insert(0, "600")
    right_speed_entry.grid(row=4, column=0)
    main_frame.grid()

    forward_button = ttk.Button(main_frame, text="Forward")
    forward_button['command'] = lambda: forward_callback(mqtt_client, left_speed_entry, right_speed_entry)
    root.bind('<Up>', lambda event: forward_callback(mqtt_client, left_speed_entry, right_speed_entry))

    fire_button = ttk.Button(main_frame, text="FIRE!")
    fire_button.grid(row=1, column=0)
    fire_button['command'] = lambda: fire_callback(mqtt_client, left_speed_entry, right_speed_entry)
    root.bind('<f>', lambda event: fire_callback(mqtt_client, left_speed_entry, right_speed_entry))

    crash_button = ttk.Button(main_frame, text="CRASH!")
    crash_button.grid(row=1, column=1)
    crash_button['command'] = lambda: crash_callback(mqtt_client, left_speed_entry, right_speed_entry)
    root.bind('<c>', lambda event: crash_callback(mqtt_client, left_speed_entry, right_speed_entry))

    firetruck_button = ttk.Button(main_frame, text="Code 3")
    firetruck_button.grid(row=1, column=2)
    firetruck_button['command'] = lambda: firetruck_callback(mqtt_client1)
    root.bind('<3>', lambda event: firetruck_callback(mqtt_client1))

    left_button = ttk.Button(main_frame, text="Left")
    left_button['command'] = lambda: left_callback(mqtt_client, left_speed_entry, right_speed_entry)
    root.bind('<Left>', lambda event: left_callback(mqtt_client, left_speed_entry, right_speed_entry))

    right_button = ttk.Button(main_frame, text="Right")
    right_button['command'] = lambda: right_callback(mqtt_client, left_speed_entry, right_speed_entry)
    root.bind('<Right>', lambda event: right_callback(mqtt_client, left_speed_entry, right_speed_entry))

    stop_button = ttk.Button(main_frame, text="Stop")
    stop_button['command'] = lambda: stop_callback(mqtt_client)
    root.bind('<s>', lambda event: stop_callback(mqtt_client))

    back_button = ttk.Button(main_frame, text="Back")
    back_button['command'] = lambda: back_callback(mqtt_client, left_speed_entry, right_speed_entry)
    root.bind('<Down>', lambda event: back_callback(mqtt_client, left_speed_entry, right_speed_entry))

    up_button = ttk.Button(main_frame, text="Up")
    up_button['command'] = lambda: send_up(mqtt_client)
    root.bind('<u>', lambda event: send_up(mqtt_client))

    down_button = ttk.Button(main_frame, text="Down")
    down_button['command'] = lambda: send_down(mqtt_client)
    root.bind('<j>', lambda event: send_down(mqtt_client))

    e_button = ttk.Button(main_frame, text="Exit")
    e_button.grid(row=4, column=2)
    e_button['command'] = (lambda: quit_program(mqtt_client, True))

    root.mainloop()


def forward_callback(mqtt_client, left_speed, right_speed):
    print("drive")
    mqtt_client.send_message("drive", [int(left_speed.get()), int(right_speed.get())])


def left_callback(mqtt_client, left_speed, right_speed):
    print("turn left")
    mqtt_client.send_message("turn_left", [int(left_speed.get()), int(right_speed.get())])


def stop_callback(mqtt_client):
    print("stop")
    mqtt_client.send_message("stop_bot")


def right_callback(mqtt_client, left_speed, right_speed):
    print("turn right")
    mqtt_client.send_message("turn_right", [int(left_speed.get()), int(right_speed.get())])


def back_callback(mqtt_client, left_speed, right_speed):
    print("back up")
    mqtt_client.send_message("back", [int(left_speed.get()), int(right_speed.get())])


def firetruck_callback(mqtt_client1):
    mqtt_client1.send_message("firetruck")


def fire_callback(mqtt_client, left_speed, right_speed):
    print("FIRE!")
    mqtt_client.send_message("follow_the_line")


def crash_callback(mqtt_client, left_speed, right_speed):
    print("CRASH!")
    mqtt_client.send_message("follow_a_line")


def send_up(mqtt_client):
    print("arm_up")
    mqtt_client.send_message("arm_up")


def send_down(mqtt_client):
    print("arm_down")
    mqtt_client.send_message("arm_down")


def quit_program(mqtt_client, shutdown_ev3):
    if shutdown_ev3:
        print("shutdown")
        mqtt_client.send_message("shutdown")
    mqtt_client.close()
    exit()


main()

